{{- /*
This rules are lifted from the 'node.rules' group from https://raw.githubusercontent.com/prometheus-operator/kube-prometheus/main/manifests/kubernetes-prometheusRule.yaml
We only divide the list in sub resources for better skimming through them
*/ -}}
{{- $nodeExporterJob := printf "%s" (include "mia-monitoring.nodeExporter.name" .) }}
{{- $kubeStateMetricsJob := printf "%s" (include "mia-monitoring.kubeStateMetrics.name" .) }}
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: {{ printf "%s-node" .Release.Name | quote }}
  labels:
    {{- include "mia-monitoring.labels" . | nindent 4 }}
  {{- with .Values.deploy.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  groups:
    - name: node.rules
      rules:
        - expr: |
            topk by(cluster, namespace, pod) (1,
              max by (cluster, node, namespace, pod) (
                label_replace(kube_pod_info{job="{{ $kubeStateMetricsJob }}",node!=""}, "pod", "$1", "pod", "(.*)")
            ))
          record: 'node_namespace_pod:kube_pod_info:'
        - expr: |
            count by (cluster, node) (
              node_cpu_seconds_total{mode="idle",job="{{ $nodeExporterJob }}"}
              * on (cluster, namespace, pod) group_left(node)
              topk by(cluster, namespace, pod) (1, node_namespace_pod:kube_pod_info:)
            )
          record: node:node_num_cpu:sum
        - expr: |
            sum(
              node_memory_MemAvailable_bytes{job="{{ $nodeExporterJob }}"} or
              (
                node_memory_Buffers_bytes{job="{{ $nodeExporterJob }}"} +
                node_memory_Cached_bytes{job="{{ $nodeExporterJob }}"} +
                node_memory_MemFree_bytes{job="{{ $nodeExporterJob }}"} +
                node_memory_Slab_bytes{job="{{ $nodeExporterJob }}"}
              )
            ) by (cluster)
          record: :node_memory_MemAvailable_bytes:sum
        - expr: |
            avg by (cluster, instance) (
              sum without (mode) (
                rate(node_cpu_seconds_total{mode!="idle",mode!="iowait",mode!="steal",job="{{ $nodeExporterJob }}"}[5m])
              )
            )
          record: node:node_cpu_utilization:ratio_rate5m
        - expr: |
            avg by (cluster) (
              node:node_cpu_utilization:ratio_rate5m
            )
          record: cluster:node_cpu:ratio_rate5m
